{"version":3,"sources":["img/logo.gif","fire.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","state","text","text1","handleText","e","setState","target","value","handleText1","handleSubmit","database","ref","orderByKey","limitToLast","push","className","class","src","img","style","height","color","for","type","onChange","this","id","aria-describedby","required","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,kNCa5BC,E,OADJC,EAASC,cAVC,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,iBC6DFC,E,4MAhEbC,MAAQ,CACNC,KAAM,GACNC,MAAO,I,EAGTC,WAAa,SAAAC,GACX,EAAKC,SAAS,CACZJ,KAAMG,EAAEE,OAAOC,S,EAGnBC,YAAc,SAAAJ,GACZ,EAAKC,SAAS,CACZH,MAAOE,EAAEE,OAAOC,S,EAGpBE,aAAe,SAAAL,GACIhB,EAAKsB,WAAWC,IAAI,YAAYC,aAAaC,YAAY,KAC1EzB,EAAKsB,WAAWC,IAAI,YAAYG,KAAK,EAAKd,OAE1C,EAAKK,SAAS,CACZJ,KAAM,GACNC,MAAO,M,uDAOT,OACE,yBAAKa,UAAU,aACb,yBAAKC,MAAM,QACT,yBAAKA,MAAM,aACT,yBAAKC,IAAKC,IAAKC,MAAO,CAAEC,OAAQ,UAChC,uBAAGD,MAAO,CAAEE,MAAO,UAAnB,oCACA,uBAAGF,MAAO,CAAEE,MAAO,UAAnB,iCAGJ,yBAAKL,MAAM,QACT,yBAAKA,MAAM,aACT,wBAAID,UAAU,cAAd,SACA,wBAAIA,UAAU,iCACZ,uBAAGI,MAAO,CAAEE,MAAO,QAAnB,SADF,iBACqD,uBAAGF,MAAO,CAAEE,MAAO,UAAnB,eADrD,4DAGA,yBAAKN,UAAU,eACf,2BAAOO,IAAI,sBAAX,iBACA,2BAAOC,KAAK,QAAQR,UAAU,eAAeS,SAAUC,KAAKtB,WAAYuB,GAAG,qBAAqBC,mBAAiB,YAAYC,UAAQ,IAErI,yBAAKb,UAAU,eACf,2BAAOO,IAAI,yBAAX,YACA,2BAAOC,KAAK,WAAWR,UAAU,eAAeS,SAAUC,KAAKjB,YAAakB,GAAG,wBAAwBE,UAAQ,IAE/G,6BACA,4BAAQL,KAAK,SAASR,UAAU,4BAA4Bc,QAASJ,KAAKhB,cAA1E,iB,GAtDMqB,a,MCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.583f733f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.479ca71d.gif\";","import firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDHTO4jLb4WUiQsHYuJJ2Ey55xPhL_U7bY\",\r\n  authDomain: \"plocal-d7fda.firebaseapp.com\",\r\n  databaseURL: \"https://plocal-d7fda.firebaseio.com\",\r\n  projectId: \"plocal-d7fda\",\r\n  storageBucket: \"plocal-d7fda.appspot.com\",\r\n  messagingSenderId: \"236763251480\",\r\n  appId: \"1:236763251480:web:4608308e19148223e5d46d\",\r\n  measurementId: \"G-XQDT4JMEBL\"\r\n  };\r\nvar fire = firebase.initializeApp(firebaseConfig);\r\nexport default fire;","import React, { Component } from 'react';\nimport './App.css';\nimport fire from './fire.js';\nimport { Redirect } from 'react-router-dom';\nimport img from './img/logo.gif'\nclass App extends Component {\n\n  state = {\n    text: \"\",\n    text1: \"\"\n  }\n\n  handleText = e => {\n    this.setState({\n      text: e.target.value\n    })\n  }\n  handleText1 = e => {\n    this.setState({\n      text1: e.target.value\n    })\n  }\n  handleSubmit = e => {\n    let messageRef = fire.database().ref('messages').orderByKey().limitToLast(100);\n    fire.database().ref('messages').push(this.state);\n    // <Redirect to=\"/staysave\" />\n    this.setState({\n      text: \"\",\n      text1: \"\"\n    }\n    )\n    \n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div class=\"card\" >\n          <div class=\"card-body\">\n            <img src={img} style={{ height: \"50px\" }} />\n            <b style={{ color: \"green\" }}>Find Near By [Covid19] Patients </b>\n            <b style={{ color: \"green\" }}># Stay At Home 🙏</b>\n          </div>\n        </div>\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h5 className=\"card-title\">Login</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">\n              <b style={{ color: \"red\" }}>Note:</b> Not required <b style={{ color: \"green\" }}>Registation</b> directly login in your\n                Gmail/Facebook/GitHub credential</h6>\n            <div className=\"form-group\" />\n            <label for=\"exampleInputEmail1\">Email address</label>\n            <input type=\"email\" className=\"form-control\" onChange={this.handleText} id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" required />\n\n            <div className=\"form-group\" />\n            <label for=\"exampleInputPassword1\">Password</label>\n            <input type=\"password\" className=\"form-control\" onChange={this.handleText1} id=\"exampleInputPassword1\" required />\n\n            <br />\n            <button type=\"submit\" className=\"btn btn-primary btn-block\" onClick={this.handleSubmit}>Submit</button>\n          </div>\n        </div>\n\n\n      </div>\n\n    );\n  }\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}